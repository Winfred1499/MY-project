#!/usr/bin/env python
import time
import pyautogui
from PIL import ImageGrab
from selenium import webdriver
from selenium.webdriver.common.by import By
import getpass
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import NoSuchElementException

user_name = input("Enter user name: ")
crown_password = getpass.getpass("Enter crowd password: ")
zukey = input("Press Zukey: ")
password = crown_password + zukey
screenshot = input("Screen shot name: ")
print()
def met():
    global device_name
    global ota_pool
    global metric
    device_name = input("Enter device name: ")
    ota_pool = input("Enter ota group: ")
    metric = input("Enter metric: ")
met()

if 'wifiKDM:' in metric:
    operation_start = metric.find('wifiKDM:') + len('wifiKDM:')
    operation_end = metric.find(':',operation_start)
    operation_value = metric[operation_start:operation_end]
if 'operation=' in metric:
    operation_start = metric.find('operation=') + len('operation=')
    operation_end = metric.find(';',operation_start)
    operation_value = metric[operation_start:operation_end]
if """operation":'""" in metric:
    operation_start = metric.find("""operation":'""") + len("""operation":'""")
    operation_end = metric.find("'",operation_start)
    operation_value = metric[operation_start:operation_end]
if 'software_version=' in metric:
    version_start = metric.find('software_version=') + len('software_version=')
    version_end = metric.find(';',version_start)
    version_value = metric[version_start:version_end]
if """_osFileTag":'""" in metric:
    version_start = metric.find("""_osFileTag":'""") + len("""_osFileTag":'""")
    version_end = metric.find("'",version_start)
    version_value = metric[version_start:version_end]
if 'software_version"#"' in metric:
    version_start = metric.find('software_version"#"') + len('software_version"#"')
    version_end = metric.find('"',version_start)
    version_value = metric[version_start:version_end]
if "key=" in metric:
    key_start = metric.find("key=") + len("key=")
    key_end = metric.find(";",key_start)
    key_value = metric[key_start:key_end]
if 'key":' in metric:
    key_start = metric.find('key":') + len('key":')
    key_end = metric.find(",",key_start)
    key_value = metric[key_start:key_end]
if """key":'""" in metric:
    key_start = metric.find("""key":'""") + len("""key":'""")
    key_end = metric.find("'",key_start)
    key_value = metric[key_start:key_end]
if "metadata=" in metric:
    metadata_start = metric.find("metadata=") + len("metadata=")
    metadata_end = metric.find(";",metadata_start)
    metadata_value = metric[metadata_start:metadata_end]
if 'metadata"#"' in metric:
    metadata_start = metric.find('metadata"#"') + len('metadata"#"')
    metadata_end = metric.find('"',metadata_start)
    metadata_value = metric[metadata_start:metadata_end]
if """metadata":'""" in metric:
    metadata_start = metric.find("""metadata":'""") + len("""metadata":'""")
    metadata_end = metric.find("'",metadata_start)
    metadata_value = metric[metadata_start:metadata_end]
if "metadata1=" in metric:
    metadata1_start = metric.find("metadata1=") + len("metadata1=")
    metadata1_end = metric.find(";",metadata1_start)
    metadata1_value = metric[metadata1_start:metadata1_end]
if 'metadata1"#"' in metric:
    metadata1_start = metric.find('metadata1"#"') + len('metadata1"#"')
    metadata1_end = metric.find('"',metadata1_start)
    metadata1_value = metric[metadata1_start:metadata1_end]
if """metadata1":'""" in metric:
    metadata1_start = metric.find("""metadata1":'""") + len("""metadata1":'""")
    metadata1_end = metric.find("'",metadata1_start)
    metadata1_value = metric[metadata1_start:metadata1_end]
if "metadata2=" in metric:
    metadata2_start = metric.find("metadata2=") + len("metadata2=")
    metadata2_end = metric.find(";",metadata2_start)
    metadata2_value = metric[metadata2_start:metadata2_end]
if 'metadata2"#"' in metric:
    metadata2_start = metric.find('metadata2"#"') + len('metadata2"#"')
    metadata2_end = metric.find('"',metadata2_start)
    metadata2_value = metric[metadata2_start:metadata2_end]
if """metadata2":'""" in metric:
    metadata2_start = metric.find("""metadata2":'""") + len("""metadata2":'""")
    metadata2_end = metric.find("'",metadata2_start)
    metadata2_value = metric[metadata2_start:metadata2_end]
if "metadata3=" in metric:
    metadata3_start = metric.find("metadata3=") + len("metadata3=")
    metadata3_end = metric.find(";",metadata3_start)
    metadata3_value = metric[metadata3_start:metadata3_end]
if 'metadata3"#"' in metric:
    metadata3_start = metric.find('metadata3"#"') + len('metadata3"#"')
    metadata3_end = metric.find('"',metadata3_start)
    metadata3_value = metric[metadata3_start:metadata3_end]
if """metadata3":'""" in metric:
    metadata3_start = metric.find("""metadata3":'""") + len("""metadata3":'""")
    metadata3_end = metric.find("'",metadata3_start)
    metadata3_value = metric[metadata3_start:metadata3_end]
if "metadata4=" in metric:
    metadata4_start = metric.find("metadata4=") + len("metadata4=")
    metadata4_end = metric.find(";",metadata4_start)
    metadata4_value = metric[metadata4_start:metadata4_end]
if 'metadata4"#"' in metric:
    metadata4_start = metric.find('metadata4"#"') + len('metadata4"#"')
    metadata4_end = metric.find('"',metadata4_start)
    metadata4_value = metric[metadata4_start:metadata4_end]
if """metadata4":'""" in metric:
    metadata4_start = metric.find("""metadata4":'""") + len("""metadata4":'""")
    metadata4_end = metric.find("'",metadata4_start)
    metadata4_value = metric[metadata4_start:metadata4_end]
else:
    print()

def search_filter():
    global Filter
    global Filter_kdm
    global Filter_minerva
    program_kdm = "wifiKDM"
    program_minerva = "wifiKDM_minerva"
    Filter = f"software_version:{version_value} AND device_family:{device_name} AND operation:{operation_value} AND pool:{ota_pool}"
    key = ("key=" or """key":'""" or 'key":')
    if key in metric:
        Filter += f" AND key:{key_value}"
    if "metadata" in metric:
        Filter += f" AND metadata:{metadata_value}"
    if "metadata1" in metric:
        Filter += f" AND d_metadata1:{metadata1_value}"
    if "metadata2" in metric:
        Filter += f" AND d_metadata2:{metadata2_value}"
    if "metadata3" in metric:
        Filter += f" AND d_metadata3:{metadata3_value}"
    if "metadata4" in metric:
        Filter += f" AND d_metadata4:{metadata4_value}"
    else:
        print()
    Filter_kdm = Filter + f" AND program:{program_kdm}"
    Filter_minerva = Filter + f" AND program:{program_minerva}"
search_filter()


print("""Raw = 1
Agg = 2""")
raw_agg = input("Raw or Agg: ")
print()


def raw():
    print("Prerequisites: Metric should be emitted from device side and kept connected to stable internet for more then 4 hours")
    print()
    time.sleep(3)
    driver = webdriver.Firefox()
    driver.maximize_window()
    driver.get("https://kdm-raw-es.labcollab.net/app/kibana#/discover?_g=h@44136fa&_a=h@b49d08f")
    userid = WebDriverWait(driver,100).until(
        EC.element_to_be_clickable((By.XPATH,"//div/div/form/input[@id='user_name_field']"))
    )
    userid.send_keys(user_name)
    driver.find_element(By.XPATH,"//div/div/form/input[@id='user_name_btn']").click()
    WebDriverWait(driver,100).until(
        EC.element_to_be_clickable((By.XPATH,"//div/div/form/input[@id='password_field']"))
    ).send_keys(password)
    driver.find_element(By.XPATH,"//div/div/form/input[@id='password_btn']").click()
    search = WebDriverWait(driver,100).until(
        EC.element_to_be_clickable((By.XPATH,"//div/div/form/div/div/input[@placeholder='Search...']"))
    )
    time.sleep(2)
    pyautogui.hotkey("backspace")
    time.sleep(2)
    search.send_keys(Filter_kdm)
    time.sleep(3)
    WebDriverWait(driver,20).until(
        EC.element_to_be_clickable((By.XPATH,"//div/div/div/pretty-duration[@from='timefilter.time.from']"))
    ).click()
    WebDriverWait(driver,20).until(
        EC.element_to_be_clickable((By.XPATH,"//div/div/div/div/ul/li/a[contains(text(),'Last 7 days')]"))
    ).click()
    time.sleep(3)
    pyautogui.hotkey("Ctrl", "R")
    time.sleep(25)
    try:
        kdm_results = driver.find_element(By.XPATH, "//div/doc-table/div[@class='doc-table-container']")
        kdm_results_text = kdm_results.text
        if version_value in kdm_results_text:
            WebDriverWait(driver,20).until(
              EC.element_to_be_clickable((By.XPATH,"//div/table/tbody/tr/td[@ng-click='toggleRow()']"))
            ).click()
            for i in range(11):
                pyautogui.hotkey("down")
        else:
            print()
    except NoSuchElementException:
        print()
    kdm_file_path = f"c:/Users/dswinfre/Pictures/{screenshot}_kdm.png"
    screen_capture = ImageGrab.grab()
    screen_capture.save(kdm_file_path)
    print(f"Screenshot saved to {kdm_file_path}")
    time.sleep(2)
    try:
        kdm_results = driver.find_element(By.XPATH, "//div/doc-table/div[@class='doc-table-container']")
        kdm_results_text = kdm_results.text
        if version_value in kdm_results_text:
            print(f"{operation_value} kdm metric is been emitted. Hence passing the case.")
        else:
            print(f"{operation_value} kdm metric is not been emitted. Hence failing the case.")
    except NoSuchElementException:
        print(f"{operation_value} kdm metric is not been emitted. Hence failing the case.")
    search = WebDriverWait(driver,20).until(
        EC.element_to_be_clickable((By.XPATH,"//div/div/form/div/div/input[@placeholder='Search...']"))
    )
    search.clear()
    time.sleep(2)
    search.send_keys(Filter_minerva)
    time.sleep(2)
    driver.find_element(By.XPATH,"//form/div/div/button/span[@class='fa fa-search']").click()
    time.sleep(2)
    pyautogui.hotkey("Ctrl", "R")
    time.sleep(20)
    try:
        minerva_results = driver.find_element(By.XPATH, "//div/doc-table/div[@class='doc-table-container']")
        minerva_results_text = minerva_results.text
        if version_value in minerva_results_text:
            WebDriverWait(driver,20).until(
              EC.element_to_be_clickable((By.XPATH,"//div/table/tbody/tr/td[@ng-click='toggleRow()']"))
            ).click()
            for i in range(11):
                pyautogui.hotkey("down")
        else:
            print()
    except NoSuchElementException:
        print()
    minerva_file_path = f"c:/Users/dswinfre/Pictures/{screenshot}_minerva.png"
    screen_capture = ImageGrab.grab()
    screen_capture.save(minerva_file_path)
    print(f"Screenshot saved to {minerva_file_path}")
    time.sleep(2)
    try:
        minerva_results = driver.find_element(By.XPATH, "//div/doc-table/div[@class='doc-table-container']")
        minerva_results_text = minerva_results.text
        if version_value in minerva_results_text:
            print(f"{operation_value} minerva metric is been emitted. Hence passing the case.")
        else:
            print(f"{operation_value} minerva metric is not been emitted. Hence failing the case.")
    except NoSuchElementException:
        print(f"{operation_value} minerva metric is not been emitted. Hence failing the case.")
    pyautogui.hotkey("alt", "tab")

def agg():
    print("Prerequisites: Metric should be emitted from device side and kept connected to stable internet for more then 8 hours")
    print()
    time.sleep(3)
    driver = webdriver.Firefox()
    driver.maximize_window()
    driver.get("https://kdm-agg-es.labcollab.net/app/kibana#/discover?_g=h@44136fa&_a=h@b49d08f")
    userid = WebDriverWait(driver,100).until(
        EC.element_to_be_clickable((By.XPATH,"//div/div/form/input[@id='user_name_field']"))
    )
    userid.send_keys(user_name)
    driver.find_element(By.XPATH,"//div/div/form/input[@id='user_name_btn']").click()
    WebDriverWait(driver,100).until(
        EC.element_to_be_clickable((By.XPATH,"//div/div/form/input[@id='password_field']"))
    ).send_keys(password)
    driver.find_element(By.XPATH,"//div/div/form/input[@id='password_btn']").click()
    search = WebDriverWait(driver,100).until(
        EC.element_to_be_clickable((By.XPATH,"//div/div/query-bar/form/div/div/div/input[@data-test-subj='queryInput']"))
    )
    time.sleep(3)
    pyautogui.hotkey("backspace")
    search.send_keys(Filter_kdm)
    time.sleep(3)
    WebDriverWait(driver,20).until(
        EC.element_to_be_clickable((By.XPATH,"//div/discover-app/kbn-top-nav/div/div/div/div/div[@class='kuiLocalMenu']"))
    ).click()
    WebDriverWait(driver,20).until(
        EC.element_to_be_clickable((By.XPATH,"//div/div/div/div/div/ul/li/a[contains(text(), 'Last 7 days')]"))
    ).click()
    time.sleep(2)
    driver.find_element(By.XPATH, "//button/span[@class='fa fa-search']").click()
    time.sleep(2)
    pyautogui.hotkey("Ctrl", "R")
    time.sleep(25)
    try:
        kdm_results = driver.find_element(By.XPATH, "//main/div/div/div[@class = 'discover-content']")
        kdm_results_text = kdm_results.text
        if version_value in kdm_results_text:
            WebDriverWait(driver,20).until(
                EC.element_to_be_clickable((By.XPATH,"//div/table/tbody/tr/td[@ng-click='toggleRow()']"))
            ).click()
            for i in range(11):
                pyautogui.hotkey("down")
        else:
            print()
    except NoSuchElementException:
        print()
    kdm_file_path = f"c:/Users/dswinfre/Pictures/{screenshot}_kdm.png"
    screen_capture = ImageGrab.grab()
    screen_capture.save(kdm_file_path)
    print(f"Screenshot saved to {kdm_file_path}")
    time.sleep(2)
    try:
        kdm_results = driver.find_element(By.XPATH, "//main/div/div/div[@class = 'discover-content']")
        kdm_results_text = kdm_results.text
        if version_value in kdm_results_text:
            print(f"{operation_value} kdm metric is been emitted. Hence passing the case.")
        else:
            print(f"{operation_value} kdm metric is not been emitted. Hence failing the case.")
    except NoSuchElementException:
        print(f"{operation_value} kdm metric is not been emitted. Hence failing the case.")
    search = WebDriverWait(driver,20).until(
        EC.element_to_be_clickable((By.XPATH,"//div/div/query-bar/form/div/div/div/input[@data-test-subj='queryInput']"))
    )
    search.clear()
    time.sleep(2)
    search.send_keys(Filter_minerva)
    time.sleep(2)
    driver.find_element(By.XPATH,"//form/div/div/button/span[@class='fa fa-search']").click()
    time.sleep(2)
    pyautogui.hotkey("Ctrl", "R")
    time.sleep(20)
    try:
        minerva_results = driver.find_element(By.XPATH, "//button/span[@class='fa fa-search']")
        minerva_results_text = minerva_results.text
        if version_value in minerva_results_text:
            WebDriverWait(driver,20).until(
                EC.element_to_be_clickable((By.XPATH,"//div/table/tbody/tr/td[@ng-click='toggleRow()']"))
            ).click()
            for i in range(11):
                pyautogui.hotkey("down")
        else:
            print()
    except NoSuchElementException:
        print()
    minerva_file_path = f"c:/Users/dswinfre/Pictures/{screenshot}_minerva.png"
    screen_capture = ImageGrab.grab()
    screen_capture.save(minerva_file_path)
    print(f"Screenshot saved to {minerva_file_path}")
    time.sleep(2)
    try:
        minerva_results = driver.find_element(By.XPATH, "//button/span[@class='fa fa-search']")
        minerva_results_text = minerva_results.text
        if version_value in minerva_results_text:
            print(f"{operation_value} minerva metric is been emitted. Hence passing the case.")
        else:
            print(f"{operation_value} minerva metric is not been emitted. Hence failing the case.")
    except NoSuchElementException:
        print(f"{operation_value} minerva metric is not been emitted. Hence failing the case.")
    pyautogui.hotkey("alt", "tab")

if raw_agg == "1":
    raw()
else:
    agg()

